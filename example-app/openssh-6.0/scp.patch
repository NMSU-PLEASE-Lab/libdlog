--- orig_src/scp.c	2012-05-19 18:22:39.000000000 -0600
+++ scp.c	2012-05-21 08:50:30.000000000 -0600
@@ -107,6 +107,9 @@
 #include <vis.h>
 #endif
 
+// libdlog
+#include <libdlog.h>
+
 #include "xmalloc.h"
 #include "atomicio.h"
 #include "pathnames.h"
@@ -150,6 +153,9 @@
 /* This is used to store the pid of ssh_program */
 pid_t do_cmd_pid = -1;
 
+// libdlog
+char *dlogTargetPath, *dlogTargetHostName;
+
 static void
 killchild(int signo)
 {
@@ -377,6 +383,9 @@
 	/* Ensure that fds 0, 1 and 2 are open or directed to /dev/null */
 	sanitise_stdfd();
 
+   // libdlog
+   dlogInit("SCP");
+
 	/* Copy argv, because we modify it */
 	newargv = xcalloc(MAX(argc + 1, 1), sizeof(*newargv));
 	for (n = 0; n < argc; n++)
@@ -513,8 +522,12 @@
 	(void) signal(SIGPIPE, lostconn);
 
 	if ((targ = colon(argv[argc - 1])))	/* Dest is remote host. */
+   {
+      // libdlog: "targPath"=where to place the files in the remote host
+      dlogTargetPath = (char*) malloc(strlen(targ)+2);
+      strcpy(dlogTargetPath, targ+1);
 		toremote(targ, argc, argv);
-	else {
+	} else {
 		if (targetshouldbedirectory)
 			verifydir(argv[argc - 1]);
 		tolocal(argc, argv);	/* Dest is local host. */
@@ -535,6 +548,9 @@
 				errs = 1;
 		}
 	}
+   // libdlog
+   dlogFinalize();
+
 	exit(errs != 0);
 }
 
@@ -577,6 +593,10 @@
 		tuser = NULL;
 	}
 
+   // libdlog
+   dlogTargetHostName = (char*) malloc(strlen(thost)+2);
+   strcpy(dlogTargetHostName, cleanhostname(thost));
+
 	if (tuser != NULL && !okname(tuser)) {
 		xfree(arg);
 		return;
@@ -808,6 +828,11 @@
 			}
 			continue;
 		}
+
+      // libdlog: starts logging data transfer
+      unsigned long int transId = dlogBeginTransfer(name, stb.st_size,
+                userid, "localhost", dlogTargetPath, dlogTargetHostName, 1);
+
 		if (showprogress)
 			start_progress_meter(curfile, stb.st_size, &statbytes);
 		set_nonblock(remout);
@@ -829,6 +854,9 @@
 				haderr = errno;
 		}
 		unset_nonblock(remout);
+      // libdlog: to finish the logging data transfer
+      dlogEndTransfer(transId,0);
+
 		if (showprogress)
 			stop_progress_meter();
 
